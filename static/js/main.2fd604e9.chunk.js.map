{"version":3,"sources":["DadJoke.js","Bikes.js","Clock.js","Bus.js","App.js","serviceWorker.js","index.js"],"names":["DadJoke","useState","joke","setJoke","useEffect","console","log","fetch","then","response","json","data","children","className","title","selftext","service","createEnturService","clientName","Bikes","bikeStations","setBikeStations","getBikeRentalStationsByPosition","latitude","longitude","map","station","key","id","Station","props","name","bikesAvailable","spacesAvailable","Clock","dateTime","DateTime","local","setLocale","toLocaleString","TIME_24_SIMPLE","weekday","day","month","EnturService","Departure","departure","expectedDepartureTime","serviceJourney","departureTime","fromISO","journeyPattern","line","publicCode","Bus","departures","setDepartures","departuresFromCenter","setDeparturesFromCenter","departuresToCenter","setDeparturesToCenter","refresh","isTowardsCenter","getDeparturesFromStopPlace","filter","d","quay","slice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2fd604e9.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst DadJoke = () => {\r\n  const [joke, setJoke] = useState({}); //{} for ett objekt\r\n\r\n  useEffect(() => {\r\n    console.log(\"component rendered\");\r\n    fetch(\"https://www.reddit.com/r/dadjokes/top.json?t=day&limit=1\")\r\n      .then((response) => response.json())\r\n      .then((json) => setJoke(json.data.children[0].data));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"DadJoke\">\r\n      <h2>Joke of the day</h2>\r\n      <p>{joke.title}</p>\r\n      <p>{joke.selftext}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DadJoke;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport createEnturService from \"@entur/sdk\";\r\n\r\nconst service = createEnturService({\r\n  clientName: \"annaandresen-infoskjerm\",\r\n});\r\n\r\nconst Bikes = () => {\r\n  const [bikeStations, setBikeStations] = useState([]); //[] ettersom det er flere stasjoner\r\n\r\n  useEffect(() => {\r\n    service\r\n      .getBikeRentalStationsByPosition(\r\n        {\r\n          latitude: 63.432703,\r\n          longitude: 10.416317,\r\n        },\r\n        300\r\n      )\r\n      .then((data) => setBikeStations(data));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Bikes\">\r\n      <h2>Bysykkelstasjoner</h2>\r\n      {bikeStations.map((station) => (\r\n        <Station key={station.id} station={station} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bikes;\r\n\r\nconst Station = (props) => {\r\n  const { name, bikesAvailable, spacesAvailable } = props.station;\r\n  console.log(name, bikesAvailable, spacesAvailable);\r\n\r\n  return (\r\n    <div className=\"station\">\r\n      <h3>{name}</h3>\r\n      Sykler: {bikesAvailable} - Ledig plass: {spacesAvailable}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\"\r\nimport { DateTime } from \"luxon\";\r\n\r\nfunction Clock(){\r\n    const dateTime = DateTime.local().setLocale(\"nb-NO\");\r\n\r\n    console.log(dateTime.toLocaleString(DateTime.TIME_24_SIMPLE));\r\n\r\n\r\n    return <div className=\"clock\">\r\n        <h2 className=\"time\">{dateTime.toLocaleString(DateTime.TIME_24_SIMPLE)} </h2>\r\n        <h2 className=\"date\">{dateTime.toLocaleString({weekday: \"long\", day: \"numeric\", month: \"long\"})}</h2>\r\n    </div>;\r\n}\r\n\r\nexport default Clock;","import React, { useState, useEffect } from \"react\";\r\nimport EnturService from \"@entur/sdk\";\r\nimport { DateTime } from \"luxon\";\r\n\r\nconst service = new EnturService({ clientName: 'annaandresen-infoskjerm'});\r\n\r\nconst Bus = (props) => {\r\n    const [departures, setDepartures] = useState([]);\r\n    const [departuresFromCenter, setDeparturesFromCenter] = useState([]);\r\n    const [departuresToCenter, setDeparturesToCenter] = useState([]);\r\n    const { refresh } = props;\r\n    const isTowardsCenter = props.isTowardsCenter; \r\n  \r\n    const id = \"NSR:StopPlace:43577\";\r\n  \r\n    const fromCenter = \"NSR:Quay:74793\";\r\n    const toCenter = \"NSR:Quay:74792\";\r\n  \r\n    const size = 8;\r\n  \r\n    useEffect(() => {service.getDeparturesFromStopPlace(id).then((data) => setDepartures(data));}, [refresh]);\r\n  \r\n    useEffect(() => {\r\n      setDeparturesFromCenter(departures.filter((d) => d.quay.id === fromCenter));\r\n      setDeparturesToCenter(departures.filter((d) => d.quay.id === toCenter));\r\n    }, [departures]);\r\n\r\n    if (isTowardsCenter){\r\n      return (\r\n        <div className=\"buses towards\">\r\n          <h2>Bakkegata - Mot Sentrum</h2>\r\n          <div className=\"busDirection\">\r\n            {departuresToCenter.slice(0, size).map((departure) => (\r\n              <Departure key={departure.serviceJourney.id} departure={departure} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return(\r\n      <div className=\"buses from\">\r\n      <h2>Bakkegata - Fra Sentrum</h2>\r\n      <div className=\"busDirection\">\r\n        {departuresFromCenter.slice(0, size).map((departure) => (\r\n          <Departure key={departure.serviceJourney.id} departure={departure} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n    );\r\n  };\r\n  \r\n  const Departure = (props) => {\r\n    const { departure } = props;\r\n    const { expectedDepartureTime, serviceJourney } = departure;\r\n    const departureTime = DateTime.fromISO(expectedDepartureTime);\r\n    return (\r\n      <div className=\"departure\">\r\n        <p>#{serviceJourney.journeyPattern.line.publicCode}</p>Avgang: {departureTime.toLocaleString(DateTime.TIME_24_SIMPLE)}\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default Bus;","import React from \"react\";\r\n//import \"./App.css\";\r\nimport DadJoke from \"./DadJoke\";\r\nimport Bikes from \"./Bikes\";\r\n//import Reddit from \"./Reddit\";\r\nimport Clock from \"./Clock\";\r\nimport Bus from \"./Bus\";\r\n//import News from \"./News\";\r\n//import Weather from \"./Weather\";\r\n//import Bring from \"./Bring\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Clock />\r\n      <div className=\"gridContent\">\r\n        <div className=\"bikesAndJokes\">\r\n          <Bikes />\r\n          <DadJoke />\r\n        </div>\r\n        <Bus isTowardsCenter={true}/>\r\n        <Bus isTowardsCenter={false}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}